apply plugin: 'com.android.application'
// For Dagger2
apply plugin: 'com.neenbedankt.android-apt'
// For Realm
apply plugin: 'realm-android'
// For JaCoCo coverage report
apply plugin: 'jacoco'
// For Sonarqube
apply plugin: 'org.sonarqube'

sonarqube {
    androidVariant 'debug'
    properties {
        property 'sonar.projectKey', 'android-boilerplate'
        property 'sonar.projectName', 'android-boilerplate'
        property 'sonar.projectVersion', '1.0'
        property 'sonar.language', 'java'
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java'
        property 'sonar.java.binaries', 'build'
        property 'sonar.analysis.mode', 'publish'
        property 'sonar.github.oauth', '845ba4392348a0d45810a6498be0aea4952014f3'
        property 'sonar.github.repository', 'Innovatube/android-boilerplate'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.junit.reportPaths', 'build/test-results/testDebugUnitTest'
        property 'sonar.jacoco.reportPaths', 'build/jacoco/testDebugUnitTest.exec'
    }
}

task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "${buildDir}/intermediates/classes/debug", excludes: fileFilter)
    def mainSrc = "${project.projectDir}/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec",
            "outputs/code-coverage/connected/*coverage.ec"
    ])
}

android {
    compileSdkVersion 24
    buildToolsVersion '25.0.0'

    defaultConfig {
        applicationId "com.innovatube.boilerplate"
        minSdkVersion 15
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        debug {
            minifyEnabled false
            debuggable true
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            testCoverageEnabled true
        }
    }
    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:24.1.0'

    // Dagger2 dependencies
    apt 'com.google.dagger:dagger-compiler:2.5'
    compile 'com.google.dagger:dagger:2.5'
    provided 'javax.annotation:jsr250-api:1.0'

    // Setup Retrofit
    compile 'com.squareup.retrofit2:retrofit:2.0.1'
    compile 'com.squareup.retrofit2:converter-gson:2.0.1'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.1'
    compile 'com.squareup.okhttp3:logging-interceptor:3.2.0'

    // RxAndroid
    compile 'io.reactivex:rxandroid:1.1.0'

    // Setup material dialog for supporting android < 5.0
    compile('com.afollestad.material-dialogs:core:0.8.6.1') {
        transitive = true
    }

    // Setup facebook steho for browse Realm object
    compile 'com.facebook.stetho:stetho:1.3.1'
    compile 'com.uphyca:stetho_realm:0.9.0'

    // ButterKnife setup
    compile 'com.jakewharton:butterknife:8.2.1'
    apt 'com.jakewharton:butterknife-compiler:8.2.1'

    // Material DateTime Picker
    compile 'com.wdullaer:materialdatetimepicker:2.3.0'

    compile 'com.android.support:design:24.1.0'


}
